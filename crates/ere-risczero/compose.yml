name: ere-risczero
services:
  redis:
    hostname: redis
    image: redis:7.2.5-alpine3.19
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data

  postgres:
    hostname: postgres
    image: postgres:16.3-bullseye
    restart: always
    environment:
      POSTGRES_DB: taskdb
      POSTGRES_USER: worker
      POSTGRES_PASSWORD: password
    expose:
      - '5432'
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: -p 5432

  minio:
    hostname: minio
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DEFAULT_BUCKETS=workflow
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  exec_agent:
    image: ere-risczero/agent:latest
    runtime: nvidia
    restart: always
    depends_on:
      - postgres
      - redis
      - minio
    mem_limit: 4G
    cpu_count: 4
    environment:
      DATABASE_URL: postgresql://worker:password@postgres:5432/taskdb
      REDIS_URL: redis://redis:6379
      S3_URL: http://minio:9000
      S3_BUCKET: workflow
      # TODO: create a lower perm user on startup of minio to use for agents
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1
      RISC0_KECCAK_PO2: ${RISC0_KECCAK_PO2}
    # Enable / disable along with gpu_*_agent*
    # JOIN_STREAM: 1
    # COPROC_STREAM: 1
    entrypoint: /app/agent -t exec --segment-po2 ${SEGMENT_SIZE}

  aux_agent:
    image: ere-risczero/agent:latest
    runtime: nvidia
    pull_policy: never
    restart: always
    depends_on:
      - postgres
      - redis
      - minio
    mem_limit: 256M
    cpu_count: 1
    environment:
      DATABASE_URL: postgresql://worker:password@postgres:5432/taskdb
      REDIS_URL: redis://redis:6379
      S3_URL: http://minio:9000
      S3_BUCKET: workflow
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1
    # NOTE: if adding more aux workers, only one needs --monitor-requeue (for task reaping)
    entrypoint: /app/agent -t aux --monitor-requeue

  gpu_prove_agent0: &gpu
    image: ere-risczero/agent:latest
    runtime: nvidia
    pull_policy: never
    restart: always
    depends_on:
      - postgres
      - redis
      - minio
    mem_limit: 4G
    cpu_count: 4
    environment:
      DATABASE_URL: postgresql://worker:password@postgres:5432/taskdb
      REDIS_URL: redis://redis:6379
      S3_URL: http://minio:9000
      S3_BUCKET: workflow
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1
    entrypoint: /app/agent -t prove
    # comment-out if running in CPU proving mode
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              # TODO: how to scale this with N gpus?
              device_ids: ['0']
              capabilities: [gpu]

  snark_agent:
    image: ere-risczero/agent:latest
    runtime: nvidia
    pull_policy: never
    restart: always
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      DATABASE_URL: postgresql://worker:password@postgres:5432/taskdb
      REDIS_URL: redis://redis:6379
      S3_URL: http://minio:9000
      S3_BUCKET: workflow
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1
    entrypoint: /app/agent -t snark
    ulimits:
      # Needed for stark_verify bin
      # TODO: this number was just guess and check found
      stack: 90000000

  rest_api:
    image: ere-risczero/rest_api:latest
    restart: always
    depends_on:
      - postgres
      - minio
    mem_limit: 1G
    cpu_count: 1
    environment:
      DATABASE_URL: postgresql://worker:password@postgres:5432/taskdb
      S3_URL: http://minio:9000
      S3_BUCKET: workflow
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1
    ports:
      - '8081:8081'
    entrypoint: /app/rest_api --bind-addr 0.0.0.0:8081

volumes:
  redis-data:
  postgres-data:
  minio-data:
